#+TITLE: 比特币闪电网络:可扩展链下即时支付
#+AUTHOR: Junahan
#+EMAIL: junahan@outlook.com
#+DATE: 2018-03-23

#+BEGIN_SRC 
作者：Joseph Poon (joseph@lightning.network) , Thaddeus Dryja ( rx@awsomnet.org) 
日期：2016年1月14日
版本：0.5.9.2 （草案）
译者：Junahan - junahan@outlook.com
#+END_SRC

* 摘要
比特币协议能够囊括今天在所有电子交易系统上完成的全球金融交易量，无需一个单独保管的第三方持有基金，且除了一台通过家庭宽带链接互联网的计算机以外，对参与者无其他任何要求。一个去中心化系统被提议用于通过微支付通道（又称为支付通道或交易通道）网络发送交易，通过微支付通道实现链下价值转移。

If Bitcoin transactions can be signed with a new sighash type that addresses malleability, these transfers may occur between untrusted parties along the transfer route by contracts which, in the event of uncooperative or hostile participants, are enforceable via broadcast over the bitcoin blockchain in the event of uncooperative or hostile participants, through a series of decrementing timelocks.

* 比特币区块链可扩展性问题
比特币区块链保持分布式账本的崇高承诺，但是作为一个交易平台本身却不能够覆盖近期内任何时候的全球贸易。区块链是一个八卦协议，通过该协议，所有账本状态的更改均被广播至所有参与者。正是通过这个“八卦协议”达成了有关状态、每个人账户余额的共识。如果比特币网络中的每个节点均需要知晓发生在全球范围内的每笔单个交易，会对这个网络囊括全球所有金融交易的能力带来极大的拖累。

TODO:TBD

为了达到超过每秒47,000交易，比特币需要引导交易至链下完成。如果比特币网络支持每秒近乎无限笔交易并且交易费用极低的微支付那就更好了。很多微支付能够在交易双方依次被发送从而支持任意数量的支付交易。

* 一个微支付通道网络能够解决可扩展性问题

** 无需信任的微支付通道
就像树林里是否有一个树倒下发出声音那个老问题，如果所有人都同意树在下午2:45分倒下，那么树就真的在下午2:45分倒下。类似的，如果交易双方都同意通道中当前余额是爱丽丝拥有0.07 BTC，鲍勃拥有0.03 BTC，那么它就是真实的账户余额。然而，如果没有密码学签名，一个有趣的问题就会产生：如果其中一方不同意当前基金账目余额（树落下的时间），然而空口无凭。没有密码学签名，区块链将不知道谁拥有什么。

如果通道中的余额是爱丽丝和鲍勃各自拥有0.05 BTC，经过一次交易后，爱丽丝拥有0.07 TBC和鲍勃拥有0.03 BTC，网络需要知道那个余额才是正确的。区块链交易使用区块链账本作为一个时间戳系统来解决这个问题。于此同时，希望创建一个在不是必须的情形下无需使用这个时间戳系统的网络，这样可以使网络变得更加经济。

作为替代，双方可以提交一个签名的交易并不在网络中广播该交易。因此，如果爱丽丝和鲍勃提交一各基金到一个 2-0f-2 多方签名地址（需要双方都同意才可以花费基金），他们能够就基金当前余额状态达成一致意见。爱丽丝和鲍勃同意创建一个从基金中退还各自0.05 BTC的交易。该退款交易并不广播至区块链网络。任意一方可能这么做（广播该交易），但他们也可能选择保留该交易（不广播），他们知道他们可以任何需要的时候赎回该基金。通过推迟广播交易，他们可以在将来改变账户余额。为了更新账户余额，双方创建一个从 2-0f-2 多重签名地址创建一个花费交易，例如爱丽丝拥有0.07和鲍勃拥有0.03。然而，如果没有合适的设计，这里存在一个时间戳问题，不知道那个交易是正确的：是新的花费交易还是原始的退款交易。

然而，时间戳和日期的限制并不像比特币区块链所有交易完全排序那样复杂。就微支付通道而言，只有两个状态是必须的：当前正确的账户余额和任何历史作废账户余额。这里只能有一个正确的当前账户余额，并且可能有多个历史作废账户余额。

因此，在比特币网络中，设计一个让所有历史交易无效而只有一个最新的交易有效的比特币脚本是可能的。历史交易作废是通过一个比特币输出脚本和强制一方（违规的一方）将所有资金给到通道对手方而被强制执行。通过将全部资金作为处罚给到另外一方的措施，从而使所有历史交易无效。

这个作废处理过程能够凭借通道共识实施，通道共识是指双方就当前账本状态以及构建新状态达成一直，则真实账户余额得以更新。只有在一方对此有分歧的时候，账户余额才在区块链上反映出来。从概念上将，这个系统并非一个独立的覆盖网络，更像是现有网络的状态推迟，由于强制执行措施本身仍然在链上发生（但推迟到将来某天和某次交易）。

** 通道网络
迄今为止，微支付通道仅仅创建一个双边关系。要求每个人都和其他人创建通道无助于解决可扩展性问题。比特币可扩展性能够通过一个由微支付通道构成的巨大网络实现。

如果我们假定在比特币区块链上有一个巨大的通道网络，并且所有比特币用户均通过至少打开一个到比特币区块链的通道参与进来，就可能在这个网络内部创建近乎无限数量的交易。只有哪些和不合作通道参与方有关的交易才提前在比特币区块链上被广播。

通过一个散列锁和时间锁来阻碍比特币交易输出，通道参与方将不能够立刻偷取资金并且比特币可以被交易而无需担心对手偷盗。更进一步，通过使用交错安排交易超时的方式，就可能通过网络中多个中介发送资金而没有中间人偷取资金的风险。

* 双向支付通道
微支付通道允许简单的推迟交易状态在随后时间广播。合约通过为一方创建一个早于或者迟于某一日期广播交易的义务而得以强制执行。如果比特币区块链是一个去中心化的时间戳系统，就可以采用时钟作为去中心化共识的要素去决定数据的有效性，TODO-TBD（If the blockchain is a decentralized timestamping system, it is possible to use clocks as a component of decentralized consensus to determine data validity, as well as present states as a method to order events.）

TODO - TBD

** 通道创建中违规责任问题
为了参与到这个支付网络，参与双方必须在这个网络上创建一个微支付通道。

*** 创建一个未签名资金交易
最初的通道资金交易被创建，其中一方或者双方为该交易提供资金。双方创建该交易输入和输出但并不签名该交易。

该资金交易的输出是一个由通道参与双方组成的 2-of-2 多重签名脚本，自此开始，我们称通道双方为爱丽丝和鲍勃。双方参与者这时并不为资金交易交换签名，直到他们完成创建一个资金退还交易，该交易花费资金交易 2-of-2 多重签名脚本输出以将原来全部资金额分别退还给参与双方。不签名资金交易的目的是允许花费尚未存在的交易。如果爱丽丝和鲍勃交换资交易签名而不能够广播该交易输出的花费的话，该交易的资金可能由于爱丽丝和鲍勃双方不合作而被永远锁定（或是其他资金受损可能发生的情形，如一方为对方的合作埋单的人质扣押情形）。

爱丽丝和鲍勃双方交换输入以为资金交易提供资金（交换以用于决定通道总体的资金），并且交换各自的密钥以备随后用于签名。这些密钥用于资金交易的 2-of-2 输出；双方的签名被用于花费资金交易的输出，换句话说，爱丽丝和鲍勃双方均需同意花费资金交易。

*** 花费未签名交易
由于必须花费一个尚未交换签名的交易输出，闪电网络使用一个新的 SIGHASH_NOINPUT 交易以花费该交易输出。SIGHASH_NOINPUT 需要通过一个软分叉实现来确保交易在未被各参与方签名之前花费，这是由于如果没有新的签名散列标记，交易应当被签名以获得一个交易ID。没有 SIGHASH_NOINPUT，比特币交易不能在他们被向网络广播之前（这就好比是一方不能起草一份还没有支付给另外一方的合约）被花费。SIGHASH_NOINPUT解决这个问题。更多信息和实现细节，请参阅附录A。

没有 SIGNASH_NOINPUT 就不可能从没有交换签名的交易产生一笔花费，由于花费资金交易需要在子交易输入里面包含父交易ID的签名。交易ID是父交易（资金交易）签名的一个要素，因此双方需要在子交易能够被花费之前需要交换他们对父交易的签名。由于一方或者双方必须知道父交易签名以从中花费，这意味着任意一方均能够在子交易甚至不存在之前广播父交易（资金交易）。SGHASH_NOINPUT 通过允许子交易花费没有签名的输入而绕过这个问题。使用SGHASH_NOINPUT，运行序列如下：
1. 创建父交易（资金交易）
2. 创建子交易（承诺交易和所有从该交易的花费）
3. 签名子交易
4. 交换子交易签名
5. 签名父交易
6. 交换父交易签名
7. 广播父交易上链

直到步骤 6 已经完成，任一方不能广播父交易（步骤 7）。一直到步骤 6，交易双方都还没有给出他们的签名（父交易签名）。Futher, if one party fails during Step 6, the parent can either be spent to become the parent transaction or the inputs to the parent transaction can be double-spent (so that this entire transaction path is invalidated).

*** 承诺交易：无强制结构
双方在创建完成未签名（未广播）资金交易后签名并交换最初的承诺交易。承诺交易花费资金交易（父交易）2-of-2 输出。然而，只有资金交易被广播上链。

资金交易已经进入区块链并且其输出是一个 2-of-2 的多重签名交易，这要求双方均同意以花费该交易输出，承诺交易此时被用于表示当前账户余额。如果仅仅有一个承诺交易在双方之间被交换，那么双方都确信他们能够在资金交易上链后拿回他们各自的钱。双方并不广播上线这些承诺交易一直到他们想关闭当前通道账户。他们通过广播当前承诺交易以关闭通道。

承诺交易支付各自的账户余额给相应一方。一个稚拙（蹩脚）的实现会构造一个不广播交易，该交易是一个从单一交易（资金交易）花费的 2-of-2 花费交易，它有两个分别返还通道双方参与人资金的输出。当创建一个最初的承诺交易时，这种实现将返还所有资金给原始参与方。

#+CAPTION: 该图描述一个稚拙蹩脚的资金交易。资金交易 (F)，标识为绿色，在所有其他交易被签名后广播上链。其他所有交易均未广播以免参与方希望更改他们的账户余额。这时，只有资金交易被广播上链。
#+ATTR_HTML: :width 50%
[[./images/LN-funding-transaction-diagram.png]]

例如，爱丽丝和鲍勃同意创建一个价值 1.0 BTC（各方贡献0.5 BTC）具有一个单一 2-of-2 输出的资金交易，他们先创建一个具有两个分别给到爱丽丝和鲍勃各 0.5 BTC 输出的承诺交易，该交易被签名并且交换双方密钥，因此任何一方均能够在任何时候（取决于资金交易进入区块链）广播该交易上链。在这个时间点，资金交易签名可以被安全的交换，由于任意一方均可以通过广播承诺交易来赎回资金。

然而，当一方想要更新当前账户余额是，这个结构就坍塌了。 为了更新账户余额，他们必须更新他们承诺交易的输出值（资金交易已经进入区块链而不能被改变）。

当双方对新的承诺交易达成一致并交换前面时，任意一个承诺交易（老的或者新的）均可以被广播。由于资金交易的输出只能被赎回一次，只有其中一个承诺交易是有效的。例如，如果爱丽丝和鲍勃同意现在渠道余额中爱丽丝拥有 0.4 和鲍勃拥有 0.6，并且一个新的承诺交易被创建以反映这一点，那么两个承诺交易中的任意一个能够被广播。事实上，由于双方已经为两个交易的任一个签名并交换各自的签名，任意一方不能够限制那一个承诺交易被广播。

#+CAPTION: 任意一个承诺交易可以在任何时候被任意一方广播，只有一个将成功花费资金交易。这不工作是因为一方并不想广播最新一次交易。
#+ATTR_HTML: :width 50%
[[file:images/BLN-commitment-transaction-f2.png]]

由于任意一方均可以在任何时候广播承诺交易，结果可能是在一个新的承诺交易产生后，收到更少资金的一方有足够的激励去广播那个对他自己有更多输出价值的交易。结果是通道资金被偷走切通道被立即关闭。也就是说，不能够在这种模式下创建支付通道。

*** 承诺交易：责任认定
由于任何被签名的承诺交易都可能被广播上链，并且只有一个能够成功的上链，就有必要阻止老的承诺交易被广播。不可能在比特币网络上撤销成千上万的交易，因此替代方案势在必行。

有必要采用雇员忠诚保险（Frdelity Bond）类似的方法构造通道以替代区块链主动强制取消，因此双方作出承诺，并且违反承诺的行为被强制处罚。如果一方违背了合约，那么它将失去通道中的所有资金。

这种支付通道的合约条款是双方承诺只广播最近一次交易。广播任何老旧交易将导致违反合同，将渠道所有资金给予对方作为处罚。

如果一方能够认定广播老旧交易的责任，惩罚才能够强制执行。要做到这一点，一方必须有能力唯一地辨认谁广播了老旧交易。如果每个参与方具有一个唯一可辨识的承诺交易就可以做到这个。双方都必须对由另外一方负责广播的承诺交易输入签名。由于一方有一个由对方签名版本的承诺交易，其只能广播自己拥有的那个承诺交易版本。

对闪电网络而言，所有花费均来自于资金交易输出，承诺交易有两个半签名交易组成。一个由爱丽丝签名并送给鲍勃（C1b），另外一个由鲍勃签名并送给爱丽丝（C1a）。这两个承诺交易均花费同一个交易输出（资金交易），并且有不同的内容，只有其中一个能够被广播上链。任意一方可能签名他们自己收到的承诺交易版本（包含对方签名）并广播该版本交易。例如，鲍勃能够广播交易 C1b，因为他已经收到来自于爱丽丝对 C1b 的签名 —— 他包含爱丽丝的签名并且自己签名 C1b。这个交易（C1b）将有效花费资金交易 2-of-2 输出（需要爱丽丝和鲍勃双方签名）。

#+CAPTION: 紫颜色方框是只有爱丽丝能够广播的未广播交易。蓝色方框是只有鲍勃能够广播的未广播交易。爱丽丝只能够广播承诺交易 1a，鲍勃只能够广播承诺交易 1b。只有一个承诺交易能够花费资金交易输出。责任可以被认定，但是仍然没有惩罚。
#+ATTR_HTML: :width 50%
[[file:images/BLN-spend-out-commitment-transaction-3f.png]]

However, even with this construction, one has only merely allocated blame. 仍然不可能在比特币区块链上强制执行这个合约。鲍勃仍然信任爱丽丝不会广播一个老旧交易。于此同时，他仅仅有能力通过一个半签名交易的正确证明爱丽丝的确这样做了。

** 创建可取消合约通道
TODO - 

** Sequence Number Maturity
TODO - TBD

*** Timestop
*** Revocable Commitment Transactions
*** Redeeming Funds from the Channel: Cooperative Counterparties
*** Creating a new Commitment Transaction and Revoking Prior Commitments
*** 创建可撤销承诺交易的流程
*** 合作地关闭通道

** 双向通道可能的结果和总结

* Hashed Timelock Contract (HTLC)

** 不可撤销HTLC

** 链下可撤销HTLC

*** HTLC：当发送方广播承诺交易

*** HTLC：当接收方广播承诺交易

** HTLC链下结束

** HTLC形成和关闭顺序

* 密钥存储

* 区块链交易费用和双向通道

* 支付给合约 (Pay to Contract)

* 比特币闪电网络

** 减量时间锁

** 支付金额

** 清理失败和重建路由

** 支付路由

** 交易费用

* 风险

** 不合适的时间锁

** 强制过期滥发

** Coin Theft via Cracking

** 数据丢失

** 忘记及时广播交易

** 不能创建必要的软分叉

** 矿工共谋攻击

* 区块大小增加和共识

* 应用案例

* 结论

* 答谢

* 附录A 解决可延展性问题


* 参考
1) Satoshi Nakamoto（中本聪），"Bitcoin: A Peer-to-Peer Electronic Cash System", http://www.bitcoin.org/en/bitcoin-paper, 2009
2) Manny Trillo. Stress Test Prepares VisaNet for http://www.visa.com/blogarchives/us/2013/10/10/stress-test-prepares-visanet-for-the-most-wonderful-time-of-the-year/index.html, Oct 2013.
3) Bitcoin Wiki. Contracts: Example 7: Rapidly-adjusted (mi- cro)payments to a pre-determined party. https://en.bitcoin.it/wiki/Contracts#Example_7:_Rapidly-adjusted_.28micro.29payments_to_a_pre-determined_party.
4) bitcoinj. Working with micropayment channels. https://bitcoinj.github.io/working-with-micropayments.
5) Leslie Lamport. The Part-Time Parliament. ACM Transactions on Computer Systems, 21(2):133–169, May 1998.
6) Leslie Lamport. Time, Clocks, and the Ordering of Events in a Dis- tributed System. Communications of the ACM, 21(7):558–565, Jul 1978.
7) Alex Akselrod. Draft. https://en.bitcoin.it/wiki/User:Aakselrod/Draft, Mar 2013.
8) Alex Akselrod. ESCHATON. https://gist.github.com/aakselrod/9964667, Apr 2014.
9) Peter Todd. Near-zero fee transactions with hub-and-spoke micro- payments. http://sourceforge.net/p/bitcoin/mailman/message/33144746/, Dec 2014.
10) C.J. Plooy. Combining Bitcoin and the Ripple to create a fast, scalable, decentralized, anonymous, low-trust payment net- work. http://www.ultimatestunts.nl/bitcoin/ripple_bitcoin_draft_2.pdf, Jan 2013.
11) BitPay. Impulse. http://impulse.is/impulse.pdf, Jan 2015.
12) Mark Friedenbach. BIP 0068: Consensus-enforced transac- tion replacement signaled via sequence numbers (relative lock- time). https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki, May 2015.
13) Mark Friedenbach BtcDrak and Eric Lombrozo. BIP 0112: CHECK- SEQUENCEVERIFY. https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki, Aug 2015.
14) Jonas Schnelli. What does OP CHECKSEQUENCEVERIFY do? http://bitcoin.stackexchange.com/a/38846, Jul 2015.
15) Greg Maxwell (nullc). reddit. https://www.reddit.com/r/Bitcoin/comments/37fxqd/it_looks_like_blockstream_is_working_on_the/crmr5p2, May 2015.
16) Gavin Andresen. BIP 0016: Pay to Script Hash. https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki, Jan 2012.
17) Pieter Wuille. BIP 0032: Hierarchical Deterministic Wallets. https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki, Feb 2012.
18) Ilja Gerhardt and Timo Hanke. Homomorphic Payment Addresses and the Pay-to-Contract Protocol. http://arxiv.org/abs/1212.3257, Dec 2012.
19) Nick Szabo. Formalizing and Securing Relationships on Public Net- works. http://szabo.best.vwh.net/formalize.html, Sep 1997.
